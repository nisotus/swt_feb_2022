# point = dict (x=1, y= 2, z=3)
# print(point)

# print(point["x"])
# print(point["y"])

# point ["p"] =20
# print(point)

# point ["x"] = 10
# print(point)

# if "a" in point:
#     print(point.get("a"))
    
# del point["x"]
# print(point)

# my_list = [1, 2, 3, 4]
# total = 0

# sum = sum(my_list)
# for i in my_list:
#     total = total + 1
#     print(total)


# my_dict = dict(x=1, y=2, z=3)
# print(my_dict)

# for i in my_dict:
#     print(i, my_dict[i])
    
# my_dict = dict(x=1, Y = 2, z = 3)
# print(my_dict)

# for key in my_dict:
#     print(key, my_dict[key])
    

# my_dict = dict(x=1, y= 2, z=3)
# print(my_dict)

# for x in my_dict.items():
#     print(x)
    
    

# dict = {"a": 1, "b": 2, "c": 3, "d": 4}

# values = []

# for x,y in dict.item():
#     print(x, y*2)



###Classes##################################################################################################################################################
# class Point:
#     def draw(self):
#         print("draw")
        
#     def move(self):
#          print("move")
        
        
        
# point = Point()

# print(type(point))

# print(isinstance(point, int))

# print(isinstance(point, Point))



# class Point:
#     default_color = "red"
    
#     def __init__(self,x,y):
#         self.x = x
#         self.y = y
        
#     def draw(self):
#         #print("draw")
#         print(f"Point({self.x}, {self.y}")
        
# Point.default_color = "Yellow"
# print(Point.default_color)
        
# point = Point(1, 2)
# point.x
# point.y
# print(point.x)
# print(point.y)


# point.z = 20
# point.draw()


##Instance attribute

# another = Point(3, 4)
# another.draw()
# print(another.default_color)
# another.draw()

# class Point:
#     def __init__(self, x, y):
#         self.x = x
#         self.y = y
    
#     @classmethod
#     def zero(cls):
#         return cls(0,0)    
#     def draw(self):
#         print(f"Point({self.x}, {self.y})")
        
# point = Point(1,2)
# point.draw()
    
# #####Class Methods########################################################################################
# point = Point.zero()
# point.draw()



# class Point:
    
#     def __init__(self, x, y):
#         self.x = x
#         self.y = y
        
#     def __str__(self):
#         return (f"point{self.x}, {self.y})")
        
#     def draw(self):
#         print(f"Point({self.x}, {self.y})")
        
    
        
# point = Point(1, 2)
# print(point)
# print(str(point))

# class Point:
    
#     def __init__(self, x, y):
#         self.x = x
#         self.y = y
    
#     def __eq__(self, second):
#         return self.x == second.x and second.y == second.y
    
#     def __gt__(self, second):
#         return self.x > second.x and self.y > second.y
    
    
        
    
    
        
# first = Point(1,2)

# second = Point(1,2)

# print(first == second)
# print(first > second)
# print(first < second)



# ##magic method for performing arithmetric between two object



# class Point:
    
#     def __init__(self, x, y):
#         self.x = x
#         self.y = y
        
#     def __add__(self, second):
#         return self.x + second.x, self.y + second.y
        
# first = Point(10,20)
# second = Point(1, 2 )
# print(first + second)



###Containers########

class TagCloud:
    
    def __init__(self):
        self.tags = {}
        
    def add(self, tag): 
        self.tags[tag]= self.tags.get(tag, 0) + 1
    
        
        
    

        
        
        
# cloud = TagCloud()   
# len(cloud)
# cloud["Python"]

# cloud["python"] = 10

# for tag in cloud:
#     print(tag)
        
        
cloud = TagCloud()
cloud.add("python")
cloud.add("python")
cloud.add("python")
print(cloud.tags)